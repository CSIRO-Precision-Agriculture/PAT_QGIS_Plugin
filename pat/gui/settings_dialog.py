# -*- coding: utf-8 -*-"""/*************************************************************************** CSIRO Precision Agriculture Tools (PAT) Plugin SettingsDialog - Dialog used for setting default paths for use with PAT.        These will only get used on first run. Each separate tool will then        store it's own sets of defaults.           -------------------        begin      : 2018-03-13        git sha    : $Format:%H$        copyright  : (c) 2018, Commonwealth Scientific and Industrial Research Organisation (CSIRO)        email      : PAT@csiro.au ***************************************************************************//*************************************************************************** *                                                                         * *   This program is free software; you can redistribute it and/or modify  * *   it under the terms of the associated CSIRO Open Source Software       * *   License Agreement (GPLv3) provided with this plugin.                  * *                                                                         * ***************************************************************************/"""import loggingimport osimport sysimport platformfrom qgis.core import QgsProjecttry:    import configparser as configparserexcept ImportError:    import configparserfrom pkg_resources import get_distributionimport qgisimport webbrowserfrom pat import PLUGIN_NAME,TEMPDIR, PLUGIN_DIRfrom qgis.PyQt import uicfrom qgis.PyQt.QtWidgets import QMessageBoxfrom qgis.PyQt import QtCore, QtGuifrom qgis.core import Qgisfrom qgis.PyQt.QtWidgets import QFileDialogfrom util.check_dependencies import check_vesper_dependency, get_plugin_statefrom util.custom_logging import stop_logging, setup_logger, set_log_filefrom util.settings import read_setting, write_setting, update_elementfrom pyprecag import configpluginPath = os.path.split(os.path.dirname(__file__))[0]WIDGET, BASE = uic.loadUiType(os.path.join(pluginPath, 'gui', 'settings_dialog_base.ui'))LOGGER = logging.getLogger(__name__)LOGGER.addHandler(logging.NullHandler())  # logging.StreamHandler()class SettingsDialog(BASE, WIDGET):    """Dialog for managing plugin settings."""    def __init__(self, iface, parent=None):        super(SettingsDialog, self).__init__(parent)        # Set up the user interface from Designer.        self.setupUi(self)        self.iface = iface        self.lneInDataDirectory.setText(read_setting(PLUGIN_NAME + '/BASE_IN_FOLDER'))        self.lneOutDataDirectory.setText(read_setting(PLUGIN_NAME + '/BASE_OUT_FOLDER'))        self.chkDisplayTempLayers.setChecked(read_setting(PLUGIN_NAME + '/DISP_TEMP_LAYERS', bool))        self.chkDebug.setChecked(read_setting(PLUGIN_NAME + '/DEBUG', bool))        self.chkSaveLogToProjectFolder.setChecked(read_setting(PLUGIN_NAME + '/PROJECT_LOG', bool))        self.chkUseProjectName.setChecked(read_setting(PLUGIN_NAME + '/USE_PROJECT_NAME', bool))        self.vesper_exe = check_vesper_dependency()        if not os.path.exists(self.vesper_exe):            self.vesper_exe = read_setting(PLUGIN_NAME + '/VESPER_EXE')        self.lneVesperExe.setText(self.vesper_exe)        # Add text to plain text box ------------        self.pteVersions.setOpenExternalLinks(True)                self.pteVersions.setText( get_plugin_state() )        self.setWindowIcon(QtGui.QIcon(':/plugins/pat/icons/icon_settings.svg'))    @QtCore.pyqtSlot(int)    def on_chkDisplayTempLayers_stateChanged(self, state):        if read_setting(PLUGIN_NAME + '/DISP_TEMP_LAYERS', bool) != self.chkDisplayTempLayers.isChecked():            write_setting(PLUGIN_NAME + '/DISP_TEMP_LAYERS', self.chkDisplayTempLayers.isChecked())    @QtCore.pyqtSlot(int)    def on_chkDebug_stateChanged(self, state):        if config.get_debug_mode() != self.chkDebug.isChecked():            write_setting(PLUGIN_NAME + '/DEBUG', self.chkDebug.isChecked())            config.set_debug_mode(self.chkDebug.isChecked())    @QtCore.pyqtSlot(int)    def on_chkSaveLogToProjectFolder_stateChanged(self, state):        write_setting(PLUGIN_NAME + '/PROJECT_LOG', self.chkSaveLogToProjectFolder.isChecked())    @QtCore.pyqtSlot(int)    def on_chkUseProjectName_stateChanged(self, state):        write_setting(PLUGIN_NAME + '/USE_PROJECT_NAME', self.chkUseProjectName.isChecked())    @QtCore.pyqtSlot(name='on_cmdInBrowse_clicked')    def on_cmdInBrowse_clicked(self):        s = QFileDialog.getExistingDirectory(self, self.tr("Open Source Data From"),                                             self.lneInDataDirectory.text(),                                             QFileDialog.ShowDirsOnly)        if s == '':            return        s = os.path.normpath(s)        self.lneInDataDirectory.setText(s)        write_setting(PLUGIN_NAME + '/BASE_IN_FOLDER', s)        reply = QMessageBox.question(self, 'Settings', 'Do you want to change individual tools input paths?',                                     QMessageBox.Yes, QMessageBox.No)        if reply == QMessageBox.Yes:            update_element("LastInFolder",s)    @QtCore.pyqtSlot(name='on_cmdEmailLog_clicked')    def on_cmdEmailLog_clicked(self):                recipient = 'PAT@csiro.au'        subject = "Report PAT Bug".replace(' ', '%20').replace('\n', '%0D%0A')                log_file = read_setting(PLUGIN_NAME + '/LOG_FILE')        if os.path.exists(log_file):            # find the last tool run and email remaining log            with open(log_file, "r") as fp:                for l_no, line in reversed(list(enumerate(fp))):                    if line.startswith('QGIS Environment'):                        env_l_no = l_no                    if line.startswith('Processing'):                        break                fp.seek(0)                if env_l_no > l_no:                    last_tool = fp.readlines()[l_no - 1:env_l_no]                else:                        last_tool = fp.readlines()[l_no - 1:]                        body = (f'Please describe your problem\n\n\n\n'                                f'{"-~" * 50}\n'                    '-- Do not delete or change any of the following text. --\n\n'                    f'{"".join(last_tool)}\n\n'                    f'{"-~" * 50}\n'                    f'{get_plugin_state()}'                    f'\nVesper:\t{self.vesper_exe}')                        #convert to html:  double quotes("%22"), spaces('%20') and end of lines (%0D%0A')            body = body.replace('"', "%22").replace('\n', '%0D%0A')            webbrowser.open(f"mailto:?to={recipient}&subject={subject}&body={body}" , new=1)    @QtCore.pyqtSlot(name='on_cmdViewLog_clicked')    def on_cmdViewLog_clicked(self):        log_file = read_setting(PLUGIN_NAME + '/LOG_FILE')        if os.path.exists(log_file):            # try:            #     from urllib.request import pathname2url  # Python 2.x            # except:            #     from urllib.request import pathname2url  # Python 3.x            #            # url = 'file:{}'.format(pathname2url(log_file))            webbrowser.open(log_file)        @QtCore.pyqtSlot(name='on_cmdOpenFolder_clicked')                def on_cmdOpenFolder_clicked(self):        """Run method that performs all the real work"""        # show the dialog        log_file = read_setting(PLUGIN_NAME + '/LOG_FILE')        if os.path.exists(log_file):            try:                from urllib.request import pathname2url  # Python 2.x            except:                from urllib.request import pathname2url  # Python 3.x                url = 'file:{}'.format(pathname2url(os.path.dirname(log_file)))            webbrowser.open(url)    @QtCore.pyqtSlot(name='on_cmdOutBrowse_clicked')    def on_cmdOutBrowse_clicked(self):        s = QFileDialog.getExistingDirectory(self, self.tr("Save Output Data To"),                                                   self.lneOutDataDirectory.text(),                                                    QFileDialog.ShowDirsOnly)        if s == '':            return        s = os.path.normpath(s)        self.lneOutDataDirectory.setText(s)        write_setting(PLUGIN_NAME + '/BASE_OUT_FOLDER', s)                reply = QMessageBox.question(self, 'Settings', 'Do you want to change individual tools output path?',                                     QMessageBox.Yes, QMessageBox.No)        if reply == QMessageBox.Yes:            update_element("LastOutFolder",s)    @QtCore.pyqtSlot(name='on_cmdVesperExe_clicked')    def on_cmdVesperExe_clicked(self):        default_dir = os.path.dirname(self.lneVesperExe.text())        if default_dir == '' or default_dir is None:            default_dir = r'C:\Program Files (x86)'        s = QFileDialog.getOpenFileName(self, self.tr("Select Vesper Executable"),                                              directory=default_dir,                                              filter=self.tr("Vesper Executable") + " (Vesper*.exe);;"                                                     + self.tr("All Exe Files") + " (*.exe);;")        if type(s) == tuple:            s = s[0]        if s == '':  # ie nothing entered            return        s = os.path.normpath(s)        self.lneVesperExe.setText(s)        try:            config.set_config_key('vesperEXE', s)        except:            LOGGER.warning('Could not write to config.json')        self.vesper_exe = s        write_setting(PLUGIN_NAME + '/VESPER_EXE', s)    def accept(self, *args, **kwargs):        # Stop and start logging to setup the new log level        log_file = set_log_file()        return super(SettingsDialog, self).accept(*args, **kwargs)